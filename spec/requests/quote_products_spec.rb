require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/quote_products', type: :request do
  let(:quote) { FactoryBot.create(:quote) }
  # QuoteProduct. As you add validations to QuoteProduct, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    { product: :book, amount: 1 }
  end

  let(:invalid_attributes) do
    { product: :book, amount: '' }
  end

  before(:context) do
    puts Item.destroy_all ? 'SKU purge success' : 'SKU purge failed'
    p create(:book)
    p create(:face_mask)
    create(:first_aid_kit)
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      get new_quote_product_url(quote)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new QuoteProduct' do
        expect do
          post quote_products_url(quote), params: { quote_product: valid_attributes }
        end.to change(quote.products, :count).by(1)
      end

      it 'redirects to the quote' do
        post quote_products_url(quote), params: { quote_product: valid_attributes }
        expect(response).to redirect_to(quote_path(quote))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new QuoteProduct' do
        expect do
          post quote_products_url(quote), params: { quote_product: invalid_attributes }
        end.to change(quote.products, :count).by(0)
      end

      it "renders a unprocessable_entity response (i.e. to display the 'new' template)" do
        post quote_products_url(quote), params: { quote_product: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'DELETE /destroy' do
    let!(:quote_product) { quote.products.create! valid_attributes }

    it 'destroys the requested quote_product' do
      expect do
        delete quote_product_url(quote, quote_product)
      end.to change(quote.products, :count).by(-1)
    end

    it 'redirects to the quote page' do
      delete quote_product_url(quote, quote_product)
      expect(response).to redirect_to(quote_path(quote))
    end
  end
end
